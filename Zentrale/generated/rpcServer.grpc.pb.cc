// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpcServer.proto

#include "rpcServer.pb.h"
#include "rpcServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Energieversorger {

static const char* KomponentenData_method_names[] = {
  "/Energieversorger.KomponentenData/GetKomponentenIDs",
  "/Energieversorger.KomponentenData/GetKomponente",
  "/Energieversorger.KomponentenData/GetKomponentenWerte",
};

std::unique_ptr< KomponentenData::Stub> KomponentenData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KomponentenData::Stub> stub(new KomponentenData::Stub(channel, options));
  return stub;
}

KomponentenData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetKomponentenIDs_(KomponentenData_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetKomponente_(KomponentenData_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKomponentenWerte_(KomponentenData_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::Energieversorger::KomponentenID>* KomponentenData::Stub::GetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::Energieversorger::KomponentenID>::Create(channel_.get(), rpcmethod_GetKomponentenIDs_, context, request);
}

void KomponentenData::Stub::experimental_async::GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty* request, ::grpc::experimental::ClientReadReactor< ::Energieversorger::KomponentenID>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Energieversorger::KomponentenID>::Create(stub_->channel_.get(), stub_->rpcmethod_GetKomponentenIDs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>* KomponentenData::Stub::AsyncGetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Energieversorger::KomponentenID>::Create(channel_.get(), cq, rpcmethod_GetKomponentenIDs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>* KomponentenData::Stub::PrepareAsyncGetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Energieversorger::KomponentenID>::Create(channel_.get(), cq, rpcmethod_GetKomponentenIDs_, context, request, false, nullptr);
}

::grpc::Status KomponentenData::Stub::GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::Energieversorger::Komponente* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Energieversorger::KomponentenID, ::Energieversorger::Komponente, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetKomponente_, context, request, response);
}

void KomponentenData::Stub::experimental_async::GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Energieversorger::KomponentenID, ::Energieversorger::Komponente, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKomponente_, context, request, response, std::move(f));
}

void KomponentenData::Stub::experimental_async::GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKomponente_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>* KomponentenData::Stub::PrepareAsyncGetKomponenteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Energieversorger::Komponente, ::Energieversorger::KomponentenID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetKomponente_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>* KomponentenData::Stub::AsyncGetKomponenteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetKomponenteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Energieversorger::KomponentenWert>* KomponentenData::Stub::GetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request) {
  return ::grpc::internal::ClientReaderFactory< ::Energieversorger::KomponentenWert>::Create(channel_.get(), rpcmethod_GetKomponentenWerte_, context, request);
}

void KomponentenData::Stub::experimental_async::GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::experimental::ClientReadReactor< ::Energieversorger::KomponentenWert>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Energieversorger::KomponentenWert>::Create(stub_->channel_.get(), stub_->rpcmethod_GetKomponentenWerte_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>* KomponentenData::Stub::AsyncGetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Energieversorger::KomponentenWert>::Create(channel_.get(), cq, rpcmethod_GetKomponentenWerte_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>* KomponentenData::Stub::PrepareAsyncGetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Energieversorger::KomponentenWert>::Create(channel_.get(), cq, rpcmethod_GetKomponentenWerte_, context, request, false, nullptr);
}

KomponentenData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KomponentenData_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KomponentenData::Service, ::Energieversorger::Empty, ::Energieversorger::KomponentenID>(
          [](KomponentenData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Energieversorger::Empty* req,
             ::grpc::ServerWriter<::Energieversorger::KomponentenID>* writer) {
               return service->GetKomponentenIDs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KomponentenData_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KomponentenData::Service, ::Energieversorger::KomponentenID, ::Energieversorger::Komponente, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KomponentenData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Energieversorger::KomponentenID* req,
             ::Energieversorger::Komponente* resp) {
               return service->GetKomponente(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KomponentenData_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< KomponentenData::Service, ::Energieversorger::KomponentenID, ::Energieversorger::KomponentenWert>(
          [](KomponentenData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Energieversorger::KomponentenID* req,
             ::grpc::ServerWriter<::Energieversorger::KomponentenWert>* writer) {
               return service->GetKomponentenWerte(ctx, req, writer);
             }, this)));
}

KomponentenData::Service::~Service() {
}

::grpc::Status KomponentenData::Service::GetKomponentenIDs(::grpc::ServerContext* context, const ::Energieversorger::Empty* request, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KomponentenData::Service::GetKomponente(::grpc::ServerContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KomponentenData::Service::GetKomponentenWerte(::grpc::ServerContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Energieversorger


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpcServer.proto
#ifndef GRPC_rpcServer_2eproto__INCLUDED
#define GRPC_rpcServer_2eproto__INCLUDED

#include "rpcServer.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Energieversorger {

class KomponentenData final {
 public:
  static constexpr char const* service_full_name() {
    return "Energieversorger.KomponentenData";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Energieversorger::KomponentenID>> GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Energieversorger::KomponentenID>>(GetKomponentenIDsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenID>> AsyncGetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenID>>(AsyncGetKomponentenIDsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenID>> PrepareAsyncGetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenID>>(PrepareAsyncGetKomponentenIDsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::Energieversorger::Komponente* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Energieversorger::Komponente>> AsyncGetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Energieversorger::Komponente>>(AsyncGetKomponenteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Energieversorger::Komponente>> PrepareAsyncGetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Energieversorger::Komponente>>(PrepareAsyncGetKomponenteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Energieversorger::KomponentenWert>> GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Energieversorger::KomponentenWert>>(GetKomponentenWerteRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenWert>> AsyncGetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenWert>>(AsyncGetKomponentenWerteRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenWert>> PrepareAsyncGetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenWert>>(PrepareAsyncGetKomponentenWerteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty* request, ::grpc::ClientReadReactor< ::Energieversorger::KomponentenID>* reactor) = 0;
      #else
      virtual void GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty* request, ::grpc::experimental::ClientReadReactor< ::Energieversorger::KomponentenID>* reactor) = 0;
      #endif
      virtual void GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::ClientReadReactor< ::Energieversorger::KomponentenWert>* reactor) = 0;
      #else
      virtual void GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::experimental::ClientReadReactor< ::Energieversorger::KomponentenWert>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::Energieversorger::KomponentenID>* GetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenID>* AsyncGetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenID>* PrepareAsyncGetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Energieversorger::Komponente>* AsyncGetKomponenteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Energieversorger::Komponente>* PrepareAsyncGetKomponenteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Energieversorger::KomponentenWert>* GetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenWert>* AsyncGetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Energieversorger::KomponentenWert>* PrepareAsyncGetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::Energieversorger::KomponentenID>> GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Energieversorger::KomponentenID>>(GetKomponentenIDsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>> AsyncGetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>>(AsyncGetKomponentenIDsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>> PrepareAsyncGetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>>(PrepareAsyncGetKomponentenIDsRaw(context, request, cq));
    }
    ::grpc::Status GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::Energieversorger::Komponente* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>> AsyncGetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>>(AsyncGetKomponenteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>> PrepareAsyncGetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>>(PrepareAsyncGetKomponenteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Energieversorger::KomponentenWert>> GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Energieversorger::KomponentenWert>>(GetKomponentenWerteRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>> AsyncGetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>>(AsyncGetKomponentenWerteRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>> PrepareAsyncGetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>>(PrepareAsyncGetKomponentenWerteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty* request, ::grpc::ClientReadReactor< ::Energieversorger::KomponentenID>* reactor) override;
      #else
      void GetKomponentenIDs(::grpc::ClientContext* context, const ::Energieversorger::Empty* request, ::grpc::experimental::ClientReadReactor< ::Energieversorger::KomponentenID>* reactor) override;
      #endif
      void GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetKomponente(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::ClientReadReactor< ::Energieversorger::KomponentenWert>* reactor) override;
      #else
      void GetKomponentenWerte(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::experimental::ClientReadReactor< ::Energieversorger::KomponentenWert>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::Energieversorger::KomponentenID>* GetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request) override;
    ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>* AsyncGetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenID>* PrepareAsyncGetKomponentenIDsRaw(::grpc::ClientContext* context, const ::Energieversorger::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>* AsyncGetKomponenteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Energieversorger::Komponente>* PrepareAsyncGetKomponenteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Energieversorger::KomponentenWert>* GetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request) override;
    ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>* AsyncGetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Energieversorger::KomponentenWert>* PrepareAsyncGetKomponentenWerteRaw(::grpc::ClientContext* context, const ::Energieversorger::KomponentenID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetKomponentenIDs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKomponente_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKomponentenWerte_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* context, const ::Energieversorger::Empty* request, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* writer);
    virtual ::grpc::Status GetKomponente(::grpc::ServerContext* context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response);
    virtual ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* context, const ::Energieversorger::KomponentenID* request, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKomponentenIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKomponentenIDs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetKomponentenIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKomponentenIDs(::grpc::ServerContext* context, ::Energieversorger::Empty* request, ::grpc::ServerAsyncWriter< ::Energieversorger::KomponentenID>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKomponente : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKomponente() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetKomponente() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponente(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKomponente(::grpc::ServerContext* context, ::Energieversorger::KomponentenID* request, ::grpc::ServerAsyncResponseWriter< ::Energieversorger::Komponente>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKomponentenWerte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKomponentenWerte() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetKomponentenWerte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKomponentenWerte(::grpc::ServerContext* context, ::Energieversorger::KomponentenID* request, ::grpc::ServerAsyncWriter< ::Energieversorger::KomponentenWert>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetKomponentenIDs<WithAsyncMethod_GetKomponente<WithAsyncMethod_GetKomponentenWerte<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetKomponentenIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetKomponentenIDs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Energieversorger::Empty, ::Energieversorger::KomponentenID>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Energieversorger::Empty* request) { return this->GetKomponentenIDs(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetKomponentenIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Energieversorger::KomponentenID>* GetKomponentenIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Energieversorger::KomponentenID>* GetKomponentenIDs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetKomponente : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetKomponente() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Energieversorger::KomponentenID, ::Energieversorger::Komponente>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Energieversorger::KomponentenID* request, ::Energieversorger::Komponente* response) { return this->GetKomponente(context, request, response); }));}
    void SetMessageAllocatorFor_GetKomponente(
        ::grpc::experimental::MessageAllocator< ::Energieversorger::KomponentenID, ::Energieversorger::Komponente>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Energieversorger::KomponentenID, ::Energieversorger::Komponente>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetKomponente() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponente(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetKomponente(
      ::grpc::CallbackServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetKomponente(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetKomponentenWerte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetKomponentenWerte() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Energieversorger::KomponentenID, ::Energieversorger::KomponentenWert>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Energieversorger::KomponentenID* request) { return this->GetKomponentenWerte(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetKomponentenWerte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::Energieversorger::KomponentenWert>* GetKomponentenWerte(
      ::grpc::CallbackServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::Energieversorger::KomponentenWert>* GetKomponentenWerte(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetKomponentenIDs<ExperimentalWithCallbackMethod_GetKomponente<ExperimentalWithCallbackMethod_GetKomponentenWerte<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetKomponentenIDs<ExperimentalWithCallbackMethod_GetKomponente<ExperimentalWithCallbackMethod_GetKomponentenWerte<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetKomponentenIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKomponentenIDs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetKomponentenIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKomponente : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKomponente() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetKomponente() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponente(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKomponentenWerte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKomponentenWerte() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetKomponentenWerte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKomponentenIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKomponentenIDs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetKomponentenIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKomponentenIDs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKomponente : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKomponente() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetKomponente() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponente(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKomponente(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKomponentenWerte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKomponentenWerte() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetKomponentenWerte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKomponentenWerte(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetKomponentenIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetKomponentenIDs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetKomponentenIDs(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetKomponentenIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetKomponentenIDs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetKomponentenIDs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetKomponente : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetKomponente() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetKomponente(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetKomponente() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponente(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetKomponente(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetKomponente(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetKomponentenWerte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetKomponentenWerte() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetKomponentenWerte(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetKomponentenWerte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetKomponentenWerte(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetKomponentenWerte(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKomponente : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKomponente() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Energieversorger::KomponentenID, ::Energieversorger::Komponente>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Energieversorger::KomponentenID, ::Energieversorger::Komponente>* streamer) {
                       return this->StreamedGetKomponente(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetKomponente() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKomponente(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::Energieversorger::Komponente* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKomponente(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Energieversorger::KomponentenID,::Energieversorger::Komponente>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetKomponente<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetKomponentenIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetKomponentenIDs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Energieversorger::Empty, ::Energieversorger::KomponentenID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Energieversorger::Empty, ::Energieversorger::KomponentenID>* streamer) {
                       return this->StreamedGetKomponentenIDs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetKomponentenIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKomponentenIDs(::grpc::ServerContext* /*context*/, const ::Energieversorger::Empty* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenID>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetKomponentenIDs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Energieversorger::Empty,::Energieversorger::KomponentenID>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetKomponentenWerte : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetKomponentenWerte() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Energieversorger::KomponentenID, ::Energieversorger::KomponentenWert>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Energieversorger::KomponentenID, ::Energieversorger::KomponentenWert>* streamer) {
                       return this->StreamedGetKomponentenWerte(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetKomponentenWerte() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKomponentenWerte(::grpc::ServerContext* /*context*/, const ::Energieversorger::KomponentenID* /*request*/, ::grpc::ServerWriter< ::Energieversorger::KomponentenWert>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetKomponentenWerte(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Energieversorger::KomponentenID,::Energieversorger::KomponentenWert>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetKomponentenIDs<WithSplitStreamingMethod_GetKomponentenWerte<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetKomponentenIDs<WithStreamedUnaryMethod_GetKomponente<WithSplitStreamingMethod_GetKomponentenWerte<Service > > > StreamedService;
};

}  // namespace Energieversorger


#endif  // GRPC_rpcServer_2eproto__INCLUDED
